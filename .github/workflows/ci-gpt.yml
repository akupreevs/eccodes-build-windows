name: EcCodes Windows Build

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # Step 1
      - name: Checkout the code
        uses: actions/checkout@v4

      # # Step 2
      # - name: Set up Miniconda
      #   uses: conda-incubator/setup-miniconda@v2
      #   with:
      #     # auto-update-conda: true
      #     # python-version: 3.8
      #     activate-environment: ''
      #     auto-activate-base: true
      #     # condarc-file: ${{ github.workspace }}/.condarc

      # # Step 3
      # - name: Configure Git symlinks and activate Conda
      #   shell: cmd
      #   run: |
      #     git config --global core.symlinks true
      #     call C:\Miniconda38-x64\Scripts\activate.bat
      #     conda config --set always_yes yes

      # Step 4
      - name: Download Netcdf
      # See https://docs.unidata.ucar.edu/netcdf-c/current/winbin.html
        run: |
          mkdir "$env:GITHUB_WORKSPACE\netcdf"
          curl https://downloads.unidata.ucar.edu/netcdf-c/4.9.2/netCDF4.9.2-NC4-64.exe -o "$env:GITHUB_WORKSPACE\netcdf\netCDF-NC4-64.exe" 

      # Step 5
      - name: install Netcdf
        run: |
          cd "%GITHUB_WORKSPACE%\netcdf"
          dir
          netCDF-NC4-64.exe /S
          dir
        shell: cmd

      # Step 6
      - name: Add Netcdf to path
        run: |
          Add-Content $env:GITHUB_PATH "$env:GITHUB_WORKSPACE\netcdf"
          Add-Content $env:GITHUB_PATH "$env:GITHUB_WORKSPACE\netcdf\bin"
          Add-Content $env:GITHUB_PATH "$env:GITHUB_WORKSPACE\netcdf\lib"

      # Step 7
      - name: Download and extract source
        uses: actions/checkout@v4
        with:
          # Repository name with owner. Default: ${{ github.repository }}
          repository: ecmwf/eccodes
          # The branch, tag or SHA to checkout. Otherwise, uses the default branch.
          # ref: tag/2.37.0
          # Relative path under $GITHUB_WORKSPACE to place the repository
          path: Source

      # Step 8
      - name: Download and extract ecbuild - ECMWF eccodes build system
        uses: actions/checkout@v4
        with:
          # Repository name with owner. Default: ${{ github.repository }}
          repository: ecmwf/ecbuild
          # The branch, tag or SHA to checkout. Otherwise, uses the default branch.
          # ref: ""
          # Relative path under $GITHUB_WORKSPACE to place the repositor
          path: ecbuild

      # Step 9
      - name: Add path to ECMWF eccodes build system
        run: |
          Add-Content $env:GITHUB_PATH "$env:GITHUB_WORKSPACE\ecbuild"
          Add-Content $env:GITHUB_PATH "$env:CONDA\Library\bin"

      # Step 10
      - name: Set up Visual Studio
        run: |
          set VSCMD_DEBUG=3
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" x64
          where nmake
        shell: cmd

      # Step 11
      - name: Add paths for Visual Studio   # the bat above is not fully working, so we manually add to PATH
        run: |
           Add-Content $env:GITHUB_PATH "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64"
           Add-Content $env:GITHUB_PATH "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.22621.0\um\x64"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\bin\Hostx64\x64"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TestWindow"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\CommonExtensions\Microsoft\TeamFoundation\Team Explorer"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\Extensions\Microsoft\IntelliCode\CLI"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\VC\VCPackages"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\bin\Roslyn"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Team Tools\Performance Tools"
           Add-Content $env:GITHUB_PATH "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Team Tools\Performance Tools\x64"
           Add-Content $env:GITHUB_PATH "C:\Windows\Microsoft.NET\Framework64\v4.0.30319"
           echo "Visual Studio $env:VSCMD_VER"

      # Step 12
      - name: Build and install
        run: |
          echo %PATH%
          cd %GITHUB_WORKSPACE%\Source
          mkdir BUILD
          cd BUILD
          set EXTERNAL_INCLUDE=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\include;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\ATLMFC\include;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\VS\include;C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt;C:\Program Files (x86)\Windows Kits\10\\include\10.0.22621.0\\um;C:\Program Files (x86)\Windows Kits\10\\include\10.0.22621.0\\shared;C:\Program Files (x86)\Windows Kits\10\\include\10.0.22621.0\\winrt;C:\Program Files (x86)\Windows Kits\10\\include\10.0.22621.0\\cppwinrt;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\include\um
          set LIB=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\ATLMFC\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\lib\x64;C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\lib\um\x64;C:\Program Files (x86)\Windows Kits\10\lib\10.0.22621.0\ucrt\x64;C:\Program Files (x86)\Windows Kits\10\\lib\10.0.22621.0\\um\x64
          set LIBPATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\ATLMFC\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\lib\x64;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.39.33519\lib\x86\store\references;C:\Program Files (x86)\Windows Kits\10\UnionMetadata\10.0.22621.0;C:\Program Files (x86)\Windows Kits\10\References\10.0.22621.0;C:\Windows\Microsoft.NET\Framework64\v4.0.30319
          set NetCDF_C_INCLUDE_DIR=C:\hostedtoolcache\windows\Python\3.9.13\Lib\site-packages\netCDF4.libs
          cmake -G "NMake Makefiles" ^
            -D CMAKE_INSTALL_PREFIX=C:\ECMWF ^
            -D CMAKE_BUILD_TYPE=Release ^
            -D ENABLE_FORTRAN=0 ^
            -D ENABLE_NETCDF=1 ^
            -D ENABLE_JPG=1 ^
            -D ENABLE_AEC=0 ^
            -D IEEE_LE=1 ^
            -D ENABLE_MEMFS=1 ^
            -D ENABLE_TESTS=0 ^
            -D ENABLE_EXTRA_TESTS=OFF ^
            ..
           nmake install
  #        copy "%CONDA%\Library\bin\openjp2.dll" "%RUNNER_TEMP%\Install\bin\"
  #        copy "%CONDA%\Library\bin\libpng16.dll" "%RUNNER_TEMP%\Install\bin\"
  #        copy "%CONDA%\Library\bin\zlib.dll" %RUNNER_TEMP%\Install\bin\"
        shell: cmd

      # Step 13
      - name: Run tests
        run: |
          "$env:RUNNER_TEMP\Install\bin\codes_info.exe"

      # Step 14
      - name: Package artifacts
        run: |
          cd C:\
          7z a "%GITHUB_WORKSPACE%\EcCodes-win-x64.zip" "%RUNNER_TEMP%\Install"
        shell: cmd

      # Step 15
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: EcCodes-win-x64
          path: EcCodes-win-x64.zip

